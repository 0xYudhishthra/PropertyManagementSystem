/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SecurityGuard;
import java.text.SimpleDateFormat;
import java.util.*;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author User
 */
public class CheckpointCheckIn extends javax.swing.JFrame {

    /**
     * Creates new form CheckpointCheckIn
     */

    private String UID;

    public CheckpointCheckIn(String ID) {
        initComponents();
        this.setLocationRelativeTo(null);
        readcheckpointCheckInTable("");
        readCheckpointsTable("");
        this.UID = ID;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        checkpoints = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        CheckIn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        checkpointCode = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        CheckpointCheckIn = new javax.swing.JTable();

        jPasswordField1.setText("jPasswordField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        checkpoints.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        checkpoints.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkpointsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(checkpoints);

        jLabel1.setText("Code");

        CheckIn.setText("Check in");
        CheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckInActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Checkpoint Check In");

        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        CheckpointCheckIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }

        )
        {
            public boolean isCellEditable(int row, int column){
                return false;
            }
        });
        jScrollPane5.setViewportView(CheckpointCheckIn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(CheckIn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jLabel1)
                        .addGap(29, 29, 29)
                        .addComponent(checkpointCode, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back)
                                .addGap(157, 157, 157)
                                .addComponent(jLabel2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                            .addComponent(jScrollPane5))))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(back))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(checkpointCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(CheckIn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readCheckpointsTable(String query){
        try {
            //read the data from the database
            Map<Integer, Map<String, String>> checkpointCheckIns = new securityGuardFileHandler().getData("checkpoint", "SecurityGuard");
            //create a table model
            DefaultTableModel model = (DefaultTableModel)checkpoints.getModel();
            //clear the table
            model.setRowCount(0);
            //set header
            String[] header = {"CODE" , "LOCATION"};
            model.setColumnIdentifiers(header);
            if(query.equals("")){
                for (Map.Entry<Integer, Map<String, String>> entry : checkpointCheckIns.entrySet()) {
                    Map<String, String> checkpointCheckIn = entry.getValue();
                    String[] row = {checkpointCheckIn.get("CODE"), checkpointCheckIn.get("LOCATION")};
                    model.addRow(row);
                }
            }
            else{
                for (Map.Entry<Integer, Map<String, String>> entry : checkpointCheckIns.entrySet()) {
                    Map<String, String> checkpointCheckIn = entry.getValue();
                    if(checkpointCheckIn.get("CODE").equals(query)){
                        String[] row = {checkpointCheckIn.get("CODE"), checkpointCheckIn.get("LOCATION")};
                        model.addRow(row);
                    }
                }
            }
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private void readcheckpointCheckInTable(String query){
        try {
            //read the data from the database
            Map<Integer, Map<String, String>> checkpointCheckIns = new securityGuardFileHandler().getData("checkpointCheckIn", "SecurityGuard");
            //create a table model
            DefaultTableModel model = (DefaultTableModel)CheckpointCheckIn.getModel();
            //clear the table
            model.setRowCount(0);
            //set header
            String[] header = {"GUARD ID" , "CODE" , "DATE" };
            model.setColumnIdentifiers(header);
            if(query.equals("")){
                for (Map.Entry<Integer, Map<String, String>> entry : checkpointCheckIns.entrySet()) {
                    Map<String, String> checkpointCheckIn = entry.getValue();
                    String[] row = {checkpointCheckIn.get("GUARD ID"), checkpointCheckIn.get("CODE"),checkpointCheckIn.get("DATE")};
                    model.addRow(row);
                }
            }
            else{
                for (Map.Entry<Integer, Map<String, String>> entry : checkpointCheckIns.entrySet()) {
                    Map<String, String> checkpointCheckIn = entry.getValue();
                    if(checkpointCheckIn.get("CODE").equals(query)){
                        String[] row = {checkpointCheckIn.get("GUARD ID"), checkpointCheckIn.get("CODE"),checkpointCheckIn.get("DATE")};
                        model.addRow(row);
                    }
                }
            }
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        dashboard vp = new dashboard();
        vp.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    private void checkpointsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkpointsMouseClicked
        // TODO add your handling code here:
        int selectedRow = checkpoints.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)checkpoints.getModel();
        checkpointCode.setText(model.getValueAt(selectedRow, 0).toString());
    }//GEN-LAST:event_checkpointsMouseClicked

    private void CheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInActionPerformed
        // TODO add your handling code here:
        String code = checkpointCode.getText();
        if(code.equals("")){
            JOptionPane.showMessageDialog(null, "Please choose a checkpoint");
        }
        else{
            Date date = new Date();
            //format the date in ddmmyyyy
            SimpleDateFormat formatter = new SimpleDateFormat("ddMMyyyy");
            String currentDate = formatter.format(date);
            try {
                //add the data to the database
                new securityGuardFileHandler().addNewCheckIn(UID, code, currentDate);
                //clear the fields
                checkpointCode.setText("");
                readcheckpointCheckInTable("");
                //show success message
                JOptionPane.showMessageDialog(null, "Succesfully Checked In");
            } catch (Exception e) {
                e.printStackTrace();
            }            
        }
        
    }//GEN-LAST:event_CheckInActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckpointCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckpointCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckpointCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckpointCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckpointCheckIn(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckIn;
    private javax.swing.JTable CheckpointCheckIn;
    private javax.swing.JButton back;
    private javax.swing.JTextField checkpointCode;
    private javax.swing.JTable checkpoints;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
