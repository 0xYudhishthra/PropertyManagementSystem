/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Resident;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Map;

/**
 * @author yudhx
 */

public class manageComplaints extends javax.swing.JFrame {

    //instantiate file handler
    Resident.residentFileHandler residentFileHandler = new residentFileHandler();

    /**
     * Creates new form manageComplaints
     */
    public manageComplaints() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()  {

        javax.swing.JScrollPane manageComplaintsScrollPane = new javax.swing.JScrollPane();
        JPanel manageComplaintsPanel = new JPanel();
        JLabel complaintDetailsTitle = new JLabel();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        JLabel addComplaintTitle = new JLabel();
        JLabel complaintNumberTitle = new JLabel();
        JTextField complaintNumberInput = new JTextField();
        JButton delete = new JButton();
        javax.swing.JLabel pendingComplaintsTitle = new javax.swing.JLabel();
        javax.swing.JScrollPane pendingComplaintsPane = new javax.swing.JScrollPane();
        javax.swing.JTable pendingComplaintsTable = new javax.swing.JTable();
        javax.swing.JLabel viewPastComplaintsTitle = new javax.swing.JLabel();
        javax.swing.JButton update = new javax.swing.JButton();
        JLabel complaintDateTitle = new JLabel();
        JTextField complaintDetailsInput = new JTextField();
        JButton log = new JButton();
        JTextField complaintDateInput = new JTextField();
        javax.swing.JScrollPane viewPastComplaintsPane = new javax.swing.JScrollPane();
        javax.swing.JTable viewPastComplaintsTable = new javax.swing.JTable();
        javax.swing.JLabel manageComplaintsTitle = new javax.swing.JLabel();
        JButton back = new JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        manageComplaintsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 51, 0), null));

        complaintDetailsTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        complaintDetailsTitle.setText("Complaint Details");

        addComplaintTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        addComplaintTitle.setText("Add Complaint");

        complaintNumberTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        complaintNumberTitle.setText("Complaint Number");

        complaintNumberInput.setText("jTextField1");
        complaintNumberInput.setEnabled(false);

        delete.setBackground(new java.awt.Color(255, 51, 51));
        delete.setText("DELETE");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteActionPerformed();
            }
        });

        pendingComplaintsTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        pendingComplaintsTitle.setText("Pending Complaints");

        ArrayList<String> fileHeader = residentFileHandler.getFileHeader("residentComplaint", "resident");
        //convert all elements in fileHeader to capitalizes

        for (int i = 0; i < fileHeader.size(); i++) {
            fileHeader.set(i, fileHeader.get(i).substring(0,1).toUpperCase() + fileHeader.get(i).substring(1).toLowerCase());
        }

        pendingComplaintsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                //generate the string below bsed on the output of getFileHeader
                new String[]{
                        fileHeader.get(1), fileHeader.get(2), fileHeader.get(3), fileHeader.get(4)
                }
        ) {
            final Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

        //call the readData function from another
        try{
            Map<Integer, Map<String, String>> data = residentFileHandler.getPendingComplaints("RN001");
            if (data.size() != 0) {
                update.setEnabled(true);
                delete.setEnabled(true);
                pendingComplaintsTable.setEnabled(true);
                for (int i = 1; i < data.size() + 1; i++) {
                    //iterate through the data
                    for (Map.Entry<String, String> entry : data.get(i).entrySet()) {
                        for (int j = 0; j < pendingComplaintsTable.getColumnCount(); j++) {
                            if (entry.getKey().equals(pendingComplaintsTable.getColumnName(j).toUpperCase())) {
                                pendingComplaintsTable.setValueAt(entry.getValue(), i - 1, j);
                            }
                        }
                    }
                }
            } else {
                update.setEnabled(false);
                delete.setEnabled(false);
                pendingComplaintsTable.setEnabled(false);
            }

        } catch (Exception e){
            e.printStackTrace();
        }


        pendingComplaintsPane.setViewportView(pendingComplaintsTable);

        viewPastComplaintsTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        viewPastComplaintsTitle.setText("View Past Complaints");

        update.setBackground(new java.awt.Color(102, 255, 102));
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateActionPerformed();
            }
        });

        complaintDateTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        complaintDateTitle.setText("Complaint Date");

        complaintDetailsInput.setText("jTextField4");

        log.setBackground(new java.awt.Color(51, 255, 102));
        log.setText("LOG");
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logActionPerformed();
            }
        });

        complaintDateInput.setText("jTextField4");

        viewPastComplaintsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Date of Complaint", "Description", "Complaint Number", "Status"
                }
        ) {
            final Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        //call the readData function from another
        try {
            Map<Integer, Map<String, String>> data = residentFileHandler.getPastComplaints("RN001");
            if (data.size() != 0) {
                viewPastComplaintsTable.setEnabled(true);
                for (int i = 1; i < data.size() + 1; i++) {
                    //iterate through the data
                    for (Map.Entry<String, String> entry : data.get(i).entrySet()) {
                        for (int j = 0; j < viewPastComplaintsTable.getColumnCount(); j++) {
                            if (entry.getKey().equals(viewPastComplaintsTable.getColumnName(j).toUpperCase())) {
                                viewPastComplaintsTable.setValueAt(entry.getValue(), i - 1, j);
                            }
                        }
                    }
                }
            } else {
                viewPastComplaintsTable.setEnabled(false);
            }

            } catch(Exception e){
                e.printStackTrace();
            }

        viewPastComplaintsPane.setViewportView(viewPastComplaintsTable);

        javax.swing.GroupLayout manageComplaintsPanelLayout = new javax.swing.GroupLayout(manageComplaintsPanel);
        manageComplaintsPanel.setLayout(manageComplaintsPanelLayout);
        manageComplaintsPanelLayout.setHorizontalGroup(
                manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                .addComponent(delete)
                                                .addGap(18, 18, 18)
                                                .addComponent(update))
                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(addComplaintTitle)
                                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(complaintDetailsTitle)
                                                                        .addComponent(complaintDetailsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(32, 32, 32)
                                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(complaintDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(complaintDateTitle))
                                                                .addGap(41, 41, 41)
                                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(complaintNumberTitle)
                                                                        .addComponent(complaintNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(log))
                                                        .addComponent(viewPastComplaintsTitle)
                                                        .addComponent(viewPastComplaintsPane))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(pendingComplaintsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(pendingComplaintsTitle))))
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        manageComplaintsPanelLayout.setVerticalGroup(
                manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(pendingComplaintsTitle)
                                                        .addComponent(addComplaintTitle))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(pendingComplaintsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                                .addComponent(complaintNumberTitle)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(complaintNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(manageComplaintsPanelLayout.createSequentialGroup()
                                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(complaintDetailsTitle)
                                                                        .addComponent(complaintDateTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(manageComplaintsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(complaintDetailsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(complaintDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(log, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(viewPastComplaintsTitle)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(viewPastComplaintsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        manageComplaintsScrollPane.setViewportView(manageComplaintsPanel);

        manageComplaintsTitle.setFont(new java.awt.Font("Helvetica Neue", Font.PLAIN, 18)); // NOI18N
        manageComplaintsTitle.setText("Manage Complaints");

        back.setBackground(new java.awt.Color(255, 0, 51));
        back.setText("BACK");
        back.addActionListener(evt -> {
            backActionPerformed(evt);
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(manageComplaintsTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 848, Short.MAX_VALUE)
                                .addComponent(back)
                                .addContainerGap())
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(manageComplaintsScrollPane)
                                        .addContainerGap()))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manageComplaintsTitle))
                                .addContainerGap(425, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap(57, Short.MAX_VALUE)
                                        .addComponent(manageComplaintsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed() {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed() {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void logActionPerformed() {//GEN-FIRST:event_logActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logActionPerformed

    private void backActionPerformed(ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // close this window and bring up the previous one
        this.dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException |
                 InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageComplaints.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageComplaints().setVisible(true);
            }
        });
    }

    // End of variables declaration//GEN-END:variables
}
