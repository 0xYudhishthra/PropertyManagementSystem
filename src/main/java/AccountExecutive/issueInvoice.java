/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package AccountExecutive;

import com.itextpdf.text.DocumentException;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * @author yudhx
 */
public class issueInvoice extends javax.swing.JFrame {

    AccountExecutive.accountExecutiveFileHandler accountExecutiveFileHandler = new AccountExecutive.accountExecutiveFileHandler();

    /**
     * Creates new form issueInvoice
     */
    public issueInvoice(String role) {
        initComponents(role);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(String role) {

        back = new javax.swing.JButton();
        greetingPanel = new javax.swing.JPanel();
        actionTitle = new javax.swing.JLabel();
        actionName = new javax.swing.JLabel();
        userNumberTitle = new javax.swing.JLabel();
        userNumberInput = new javax.swing.JTextField();
        invoiceGenerateProgress = new javax.swing.JProgressBar();
        print = new javax.swing.JButton();
        print.setEnabled(false);
        search = new javax.swing.JButton();
        invoiceOutputPane = new javax.swing.JScrollPane();
        invoiceOutputTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back.setBackground(new java.awt.Color(255, 51, 51));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        greetingPanel.setBackground(new java.awt.Color(51, 255, 51));
        greetingPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        actionTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        actionTitle.setText("You have chosen to:");

        actionName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        actionName.setText("Issue Invoice for " + role);

        javax.swing.GroupLayout greetingPanelLayout = new javax.swing.GroupLayout(greetingPanel);
        greetingPanel.setLayout(greetingPanelLayout);
        greetingPanelLayout.setHorizontalGroup(
            greetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greetingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(greetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionName)
                    .addComponent(actionTitle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        greetingPanelLayout.setVerticalGroup(
            greetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greetingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(actionName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        userNumberTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        userNumberTitle.setText(role + " Number");


        print.setBackground(new java.awt.Color(255, 0, 255));
        print.setText("PRINT");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(255, 0, 255));
        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        invoiceOutputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                role + " Name", role + " ID", "Invoice Date", "Amount", "Invoice Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });

        invoiceOutputPane.setViewportView(invoiceOutputTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invoiceGenerateProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(print))
                    .addComponent(invoiceOutputPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(userNumberInput)
                            .addComponent(userNumberTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(search))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(greetingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(246, 246, 246)
                        .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(greetingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(back, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userNumberTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invoiceOutputPane, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceGenerateProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(print, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // close this window and open the previous window
        this.dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        //ensure that the table is not empty
        if (invoiceOutputTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No data to print");
            return;
        }

        //get the data from the table by iterating through the rows that are not empty
        //output should be like {line1: {column1: value, column2: value}, line2: {column1: value, column2: value}}
        HashMap<Integer, HashMap<String, String>> invoiceData = new HashMap<>();
        for (int i = 0; i < invoiceOutputTable.getRowCount(); i++) {
            Map<String, String> lineData = new HashMap<>();
            if (invoiceOutputTable.getValueAt(i, 0) != null) {
                for (int j = 0; j < invoiceOutputTable.getColumnCount(); j++) {
                    lineData.put(invoiceOutputTable.getColumnName(j), invoiceOutputTable.getValueAt(i, j).toString());
                }
                invoiceData.put(i, (HashMap<String, String>) lineData);
            }
        }

        //prompt the user on where to save the file, get the full path of the file and the file name
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String fileName = fileToSave.getName();
            String filePath = fileToSave.getAbsolutePath();

            //create the pdf file
            try {
                Helpers.pdfGenerator pdf = new Helpers.pdfGenerator();
                boolean isFileCreated = pdf.generatePDF(invoiceData, filePath + ".pdf");
                if (isFileCreated) {
                    JOptionPane.showMessageDialog(null, "File saved successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "File not saved");
                }
            } catch (DocumentException | IOException ex) {
                System.out.println(ex.getMessage());
            }
        }


    }//GEN-LAST:event_printActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed

        Helpers.ProgressBarLoader progressBar = new Helpers.ProgressBarLoader(invoiceGenerateProgress);

        progressBar.startLoading(0, 100, new Runnable() {

            @Override
            public void run() {
                // Perform the desired logic here
                print.setEnabled(false);
                search.setEnabled(false);
                try {
                    //read the data from the database
                    Map<Integer, Map<String, String>> data = accountExecutiveFileHandler.getInvoice(userNumberTitle.getText().substring(0, userNumberTitle.getText().indexOf(" ")), userNumberInput.getText().strip());
                    if (data.size() != 0) {
                        print.setEnabled(true);
                        search.setEnabled(true);
                        invoiceOutputTable.setEnabled(true);
                        for (int i = 1; i < data.size() + 1; i++) {
                            //iterate through the data
                            for (Map.Entry<String, String> entry : data.get(i).entrySet()) {
                                for (int j = 0; j < invoiceOutputTable.getColumnCount(); j++) {
                                    if (entry.getKey().equals(invoiceOutputTable.getColumnName(j).toUpperCase())) {
                                        invoiceOutputTable.setValueAt(entry.getValue(), i - 1, j);
                                    }
                                }
                            }
                        }
                    } else {
                        //clear the table
                        search.setEnabled(true);
                        for (int i = 0; i < invoiceOutputTable.getRowCount(); i++) {
                            for (int j = 0; j < invoiceOutputTable.getColumnCount(); j++) {
                                invoiceOutputTable.setValueAt("", i, j);
                            }
                        }
                        invoiceOutputTable.setEnabled(false);
                        //display error message
                        JOptionPane.showMessageDialog(null, "No data found for the given " + userNumberTitle.getText().substring(0, userNumberTitle.getText().indexOf(" ")) + " number", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    //clear loading bar
                    invoiceGenerateProgress.setValue(0);

                } catch (Exception e) {
                    e.printStackTrace();
                }


            }
        });

    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(issueInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(issueInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(issueInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(issueInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new issueInvoice(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actionName;
    private javax.swing.JLabel actionTitle;
    private javax.swing.JButton back;
    private javax.swing.JPanel greetingPanel;
    private javax.swing.JProgressBar invoiceGenerateProgress;
    private javax.swing.JScrollPane invoiceOutputPane;
    private javax.swing.JTable invoiceOutputTable;
    private javax.swing.JButton print;
    private javax.swing.JButton search;
    private javax.swing.JTextField userNumberInput;
    private javax.swing.JLabel userNumberTitle;
    // End of variables declaration//GEN-END:variables
}
